//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=4.8.3928.0.
// 

using System;
using System.Xml.Schema;
using System.Xml.Serialization;

namespace Astrarium.Plugins.Journal.OAL 
{
    /// <summary>
    /// Root element for OAL data
    /// </summary>
    [Serializable]
    [XmlType(AnonymousType = true, Namespace = OAL)]
    [XmlRoot(ElementName = "observations", Namespace = OAL, IsNullable = false)]
    public partial class OALData
    {
        public const string OAL = "http://groups.google.com/group/openastronomylog";

        /// <summary>
        /// Schema location
        /// </summary>
        [XmlAttribute(AttributeName = "schemaLocation", Namespace = "http://www.w3.org/2001/XMLSchema-instance")]
        public string SchemaLocation { get; set; } = $"{OAL} oal21.xsd";

        /// <summary>
        /// OAL document version (use 2.1 for export)
        /// </summary>
        [XmlAttribute(AttributeName = "version", Namespace = "")]
        public string Version { get; set; } = "2.1";

        /// <summary>
        /// Observers and coobservers
        /// </summary>
        [XmlArray(ElementName = "observers", Namespace = "")]
        [XmlArrayItem(ElementName = "observer", Namespace = "", IsNullable = false)]
        public OALObserver[] Observers { get; set; }

        /// <summary>
        /// Sites (places) of observation
        /// </summary>
        [XmlArray(ElementName = "sites", Namespace = "")]
        [XmlArrayItem(ElementName = "site", Namespace = "", IsNullable = false)]
        public OALSite[] Sites { get; set; }

        /// <summary>
        /// Sessions (series of observations)
        /// </summary>
        [XmlArray(ElementName = "sessions", Namespace = "")]
        [XmlArrayItem(ElementName = "session", Namespace = "", IsNullable = false)]
        public OALSession[] Sessions { get; set; }

        /// <summary>
        /// Observation targets (celestial objects)
        /// </summary>
        [XmlArray(ElementName = "targets", Namespace = "")]
        [XmlArrayItem(ElementName = "target", Namespace = "", IsNullable = false)]
        public OALTarget[] Targets { get; set; }

        /// <summary>
        /// Optical devices (telescopes, binoculars, optical tubes etc.)
        /// </summary>
        [XmlArray(ElementName = "scopes", Namespace = "")]
        [XmlArrayItem(ElementName = "scope", Namespace = "", IsNullable = false)]
        public OALOptics[] Optics { get; set; }

        /// <summary>
        /// Eyepieces
        /// </summary>
        [XmlArray(ElementName = "eyepieces", Namespace = "")]
        [XmlArrayItem(ElementName = "eyepiece", Namespace = "", IsNullable = false)]
        public OALEyepiece[] Eyepieces { get; set; }

        /// <summary>
        /// Lenses
        /// </summary>
        [XmlArray(ElementName = "lenses", Namespace = "")]
        [XmlArrayItem(ElementName = "lens", Namespace = "", IsNullable = false)]
        public OALLens[] Lenses { get; set; }

        /// <summary>
        /// Filters
        /// </summary>
        [XmlArray(ElementName = "filters", Namespace = "")]
        [XmlArrayItem(ElementName = "filter", Namespace = "", IsNullable = false)]
        public OALFilter[] Filters { get; set; }

        /// <summary>
        /// Cameras
        /// </summary>
        [XmlArray(ElementName = "imagers", Namespace = "")]
        [XmlArrayItem(ElementName = "imager", Namespace = "", IsNullable = false)]
        public OALImager[] Cameras { get; set; }

        /// <summary>
        /// Observations
        /// </summary>
        [XmlElement(ElementName = "observation", Namespace = "")]
        public OALObservation[] Observations { get; set; }
    }

    /// <summary>
    /// Observer: a person who makes observations
    /// </summary>
    [Serializable]
    [XmlType]
    public partial class OALObserver
    {
        /// <summary>
        /// Observer name
        /// </summary>
        [XmlElement(ElementName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Observer surname
        /// </summary>
        [XmlElement(ElementName = "surname")]
        public string Surname { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "contact")]
        public string[] Contact { get; set; }

        /// <summary>
        /// Deprecated element. Please use account element instead.
        /// Abbreviation/code of the observer for the Deep Sky Liste (DSL) of the Fachgruppe.
        /// </summary> 
        [XmlElement(ElementName = "DSL")]
        public string DSL { get; set; }

        /// <summary>
        /// Observer's accounts in different astronomical services
        /// </summary>
        [XmlElement(ElementName = "account")]
        public OALObserverAccount[] Account { get; set; }

        /// <summary>
        /// Personal offset to the "reference" correlation between the sky quality 
        /// as it can be measured with an SQM and the estimated naked eye limiting magnitude(fst) 
        /// The individual observer's offset depends mainly on the visual acuity of the observer. 
        /// If the fstOffset is known, the sky quality may be derived from faintestStar estimates
        /// by this observer. 
        /// The "reference" correlation used to convert between sky quality and fst was given by 
        /// Bradley Schaefer: fst = 5 * (1.586 - log(10 ^ ((21.568 - BSB) / 5) + 1)) where BSB is the sky quality
        /// (or background surface brightness) given in magnitudes per square arcsecond 
        /// </summary>
        [XmlElement(ElementName = "fstOffset")]
        public double FSTOffset { get; set; }

        /// <summary>
        /// Flag indicating <see cref="FSTOffset"/> value is specified
        /// </summary>
        [XmlIgnore]
        public bool FSTOffsetSpecified { get; set; }

        /// <remarks/>
        [XmlAttribute(AttributeName = "id", DataType = "ID")]
        public string Id { get; set; }
    }

    /// <summary>
    /// Defines account of an observer in some astronomical resource,
    /// for example, login name at CloudyNights
    /// </summary>
    [Serializable]
    [XmlType]
    public partial class OALObserverAccount
    {
        /// <summary>
        /// Name of service/resource, like "cloudynights.com"
        /// </summary>
        [XmlAttribute(AttributeName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Name of the observer account in thw service/resource
        /// </summary>
        [XmlText]
        public string Value { get; set; }
    }

    /// <summary>
    /// Type for variable star chart identification
    /// </summary>
    [Serializable]
    [XmlType]
    public partial class VariableStarChartId
    {
        /// <summary>
        /// 
        /// </summary>
        [XmlAttribute(AttributeName = "nonAAVSOchart")]
        public bool NonAAVSOChart { get; set; }

        /// <summary>
        /// Optional attribute if given chart is not an AAVSO chart
        /// </summary>
        [XmlIgnore]
        public bool NonAAVSOChartSpecified { get; set; }

        /// <summary>
        /// Variable star chart identification
        /// </summary>
        [XmlText]
        public string Value { get; set; }
    }

    /// <summary>
    /// Type for variable star visual magnitude
    /// </summary>
    [Serializable]
    [XmlType(TypeName = "variableStarVisMagType")]
    public partial class VariableStarVisMag
    {
        /// <remarks/>
        [XmlAttribute(AttributeName = "fainterThan")]
        public bool FainterThan { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool FainterThanSpecified { get; set; }

        /// <remarks/>
        [XmlAttribute(AttributeName = "uncertain")]
        public bool Uncertain { get; set; }

        [XmlIgnore]
        public bool UncertainSpecified { get; set; }
    
        /// <remarks/>
        [XmlText]
        public double Value { get; set; }
    }
    
    /// <remarks/>
    [XmlInclude(typeof(OALFindingsVariableStar))]
    [XmlInclude(typeof(OALFindingsDeepSky))]
    [XmlInclude(typeof(OALFindingsDeepSkyDS))]
    [XmlInclude(typeof(OALFindingsDeepSkyOC))]
    [Serializable]
    [XmlType(TypeName = "findingsType", Namespace = OALData.OAL)]
    public partial class OALFindings 
    {
        /// <remarks/>
        [XmlElement(ElementName = "description", Form = XmlSchemaForm.Unqualified)]
        public string Description { get; set; }
        
        /// <remarks/>
        [XmlAttribute(AttributeName = "lang")]
        // TODO: save in Database!
        public string Lang { get; set; }
    }
    
    /// <remarks/>
    [Serializable]
    [XmlType(TypeName = "findingsVariableStarType", Namespace = OALData.OAL)]
    public partial class OALFindingsVariableStar : OALFindings 
    {        
        /// <remarks/>
        [XmlElement(ElementName = "visMag", Form = XmlSchemaForm.Unqualified)]
        public VariableStarVisMag VisMag { get; set; }
        
        /// <remarks/>
        [XmlElement(ElementName = "comparisonStar", Form = XmlSchemaForm.Unqualified)]
        public string[] ComparisonStar { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "chartID", Form = XmlSchemaForm.Unqualified)]
        public VariableStarChartId ChartId { get; set; }

        /// <remarks/>
        [XmlAttribute(AttributeName = "brightSky")]
        public bool BrightSky { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool BrightSkySpecified { get; set; }

        /// <remarks/>
        [XmlAttribute(AttributeName = "clouds")]
        public bool Clouds { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool CloudsSpecified { get; set; }

        /// <remarks/>
        [XmlAttribute(AttributeName = "poorSeeing")]
        public bool PoorSeeing { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool PoorSeeingSpecified { get; set; }

        /// <remarks/>
        [XmlAttribute(AttributeName = "nearHorizion")]
        public bool NearHorizion { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool NearHorizionSpecified { get; set; }

        /// <remarks/>
        [XmlAttribute(AttributeName = "unusualActivity")]
        public bool UnusualActivity { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool UnusualActivitySpecified { get; set; }

        /// <remarks/>
        [XmlAttribute(AttributeName = "outburst")]
        public bool Outburst { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool OutburstSpecified { get; set; }

        /// <remarks/>
        [XmlAttribute(AttributeName = "comparismSequenceProblem")]
        public bool ComparismSequenceProblem { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool ComparismSequenceProblemSpecified { get; set; }

        /// <remarks/>
        [XmlAttribute(AttributeName = "starIdentificationUncertain")]
        public bool StarIdentificationUncertain { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool StarIdentificationUncertainSpecified { get; set; }

        /// <remarks/>
        [XmlAttribute(AttributeName = "faintStar")]
        public bool FaintStar { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool FaintStarSpecified { get; set; }
    }
    
    /// <remarks/>
    [XmlInclude(typeof(OALFindingsDeepSkyDS))]
    [XmlInclude(typeof(OALFindingsDeepSkyOC))]
    [Serializable]
    [XmlType(TypeName = "findingsDeepSkyType", Namespace = OALData.OAL)]
    public partial class OALFindingsDeepSky : OALFindings 
    {
        /// <remarks/>
        [XmlElement(ElementName = "smallDiameter", Form = XmlSchemaForm.Unqualified)]
        public OALNonNegativeAngle SmallDiameter { get; set; }
        
        /// <remarks/>
        [XmlElement(ElementName = "largeDiameter", Form = XmlSchemaForm.Unqualified)]
        public OALNonNegativeAngle LargeDiameter { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "rating", Form = XmlSchemaForm.Unqualified)]
        public OALFindingsDeepSkyRating Rating { get; set; }

        /// <remarks/>
        [XmlAttribute(AttributeName = "stellar")]
        public bool Stellar { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool StellarSpecified { get; set; }

        /// <remarks/>
        [XmlAttribute(AttributeName = "extended")]
        public bool Extended { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool ExtendedSpecified { get; set; }

        /// <remarks/>
        [XmlAttribute(AttributeName = "resolved")]
        public bool Resolved { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool ResolvedSpecified { get; set; }

        /// <remarks/>
        [XmlAttribute(AttributeName = "mottled")]
        public bool Mottled { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool MottledSpecified { get; set; }
    }
    
    /// <remarks/>
    [Serializable]
    [XmlType(TypeName = "nonNegativeAngleType", Namespace = OALData.OAL)]
    public partial class OALNonNegativeAngle : OALAngle { }
    
    /// <remarks/>
    [XmlInclude(typeof(OALNonNegativeAngle))]
    [Serializable]
    [XmlType(TypeName = "angleType", Namespace = OALData.OAL)]
    public partial class OALAngle 
    {    
        /// <remarks/>
        [XmlAttribute(AttributeName = "unit")]
        public OALAngleUnit Unit { get; set; }
        
        [XmlText]
        public double Value { get; set; }
    }
    
    /// <remarks/>
    [Serializable]
    [XmlType(TypeName = "angleUnit", Namespace = OALData.OAL)]
    public enum OALAngleUnit 
    {
        /// <remarks/>
        [XmlEnum("arcsec")]
        ArcSec,

        /// <remarks/>
        [XmlEnum("arcmin")]
        ArcMin,

        /// <remarks/>
        [XmlEnum("deg")]
        Deg,

        /// <remarks/>
        [XmlEnum("rad")]
        Rad,
    }

    /// <summary>
    /// Deep sky object's visual rating according to the scale of the "Deep Sky Liste"
    /// </summary>
    [Serializable]
    [XmlType(AnonymousType = true, Namespace = OALData.OAL)]
    public enum OALFindingsDeepSkyRating
    {        
        /// <remarks/>
        [XmlEnum("1")]
        Rating1,
        
        /// <remarks/>
        [XmlEnum("2")]
        Rating2,
        
        /// <remarks/>
        [XmlEnum("3")]
        Rating3,
        
        /// <remarks/>
        [XmlEnum("4")]
        Rating4,
        
        /// <remarks/>
        [XmlEnum("5")]
        Rating5,
        
        /// <remarks/>
        [XmlEnum("6")]
        Rating6,
        
        /// <remarks/>
        [XmlEnum("7")]
        Rating7,
        
        /// <remarks/>
        [XmlEnum("99")]
        Unknown,
    }
    
    /// <remarks/>
    [Serializable]
    [XmlType(TypeName = "findingsDeepSkyDSType", Namespace = OALData.OAL)]
    public partial class OALFindingsDeepSkyDS : OALFindingsDeepSky 
    {
        /// <remarks/>
        [XmlElement(ElementName = "colorMain", Form = XmlSchemaForm.Unqualified)]
        public starColorType ColorMain { get; set; }
        
        /// <remarks/>
        [XmlIgnore]
        public bool ColorMainSpecified { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "colorCompanion", Form = XmlSchemaForm.Unqualified)]
        public starColorType ColorCompanion { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool ColorCompanionSpecified { get; set; }

        /// <remarks/>
        [XmlAttribute(AttributeName = "equalBrightness")]
        public bool EqualBrightness { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool EqualBrightnessSpecified { get; set; }

        /// <remarks/>
        [XmlAttribute(AttributeName = "niceSurrounding")]
        public bool NiceSurrounding { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool NiceSurroundingSpecified { get; set; }
    }
    
    /// <remarks/>
    [Serializable]
    [XmlType(TypeName = "starColorType", Namespace = OALData.OAL)]
    public enum starColorType 
    {
        [XmlEnum("white")]
        White,

        [XmlEnum("red")]
        Red,

        [XmlEnum("orange")]
        Orange,

        [XmlEnum("yellow")]
        Yellow,

        [XmlEnum("green")]
        Green,

        [XmlEnum("blue")]
        Blue,
    }
    
    /// <remarks/>

    [Serializable]
    [XmlType(TypeName = "findingsDeepSkyOCType", Namespace = OALData.OAL)]
    public partial class OALFindingsDeepSkyOC : OALFindingsDeepSky
    {
        /// <remarks/>
        [XmlElement(ElementName = "character", Form = XmlSchemaForm.Unqualified)]
        public OALClusterCharacter Character { get; set; }
        
        /// <remarks/>
        [XmlIgnore]
        public bool CharacterSpecified { get; set; }

        /// <remarks/>
        [XmlAttribute(AttributeName = "unusualShape")]
        public bool UnusualShape { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool UnusualShapeSpecified { get; set; }

        /// <remarks/>
        [XmlAttribute(AttributeName = "partlyUnresolved")]
        public bool PartlyUnresolved { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool PartlyUnresolvedSpecified { get; set; }

        /// <remarks/>
        [XmlAttribute(AttributeName = "colorContrasts")]
        public bool ColorContrasts { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool ColorContrastsSpecified { get; set; }
    }
    
    /// <remarks/>
    [Serializable]
    [XmlType(TypeName = "clusterCharacterType", Namespace = OALData.OAL)]
    public enum OALClusterCharacter 
    {
        /// <remarks/>
        [XmlEnum("A")]
        A,

        /// <remarks/>
        [XmlEnum("B")]
        B,

        /// <remarks/>
        [XmlEnum("C")]
        C,

        /// <remarks/>
        [XmlEnum("D")]
        D,

        /// <remarks/>
        [XmlEnum("E")]
        E,

        /// <remarks/>
        [XmlEnum("F")]
        F,

        /// <remarks/>
        [XmlEnum("G")]
        G,

        /// <remarks/>
        [XmlEnum("H")]
        H,

        /// <remarks/>
        [XmlEnum("I")]
        I,

        /// <remarks/>
        [XmlEnum("X")]
        X
    }
    
    /// <remarks/>
    [Serializable]
    [XmlType(TypeName = "observation", Namespace = OALData.OAL)]
    public partial class OALObservation 
    {  
        /// <remarks/>
        [XmlElement(ElementName = "observer", Form = XmlSchemaForm.Unqualified, DataType = "IDREF")]
        public string ObserverId { get; set; }
        
        /// <remarks/>
        [XmlElement(ElementName = "site", Form = XmlSchemaForm.Unqualified, DataType = "IDREF")]
        public string SiteId { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "session", Form = XmlSchemaForm.Unqualified, DataType = "IDREF")]
        public string SessionId { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "target", Form = XmlSchemaForm.Unqualified, DataType = "IDREF")]
        public string TargetId { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "begin", Form = XmlSchemaForm.Unqualified)]
        public DateTime Begin { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "end", Form = XmlSchemaForm.Unqualified)]
        public DateTime End { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool EndSpecified { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "faintestStar", Form = XmlSchemaForm.Unqualified)]
        public double FaintestStar { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool FaintestStarSpecified { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "sky-quality", Form = XmlSchemaForm.Unqualified)]
        public OALSurfaceBrightness SkyQuality { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "seeing", Form = XmlSchemaForm.Unqualified, DataType = "nonNegativeInteger")]
        public string Seeing { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "scope", Form = XmlSchemaForm.Unqualified, DataType = "IDREF")]
        public string ScopeId { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "accessories", Form = XmlSchemaForm.Unqualified)]
        public string Accessories { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "eyepiece", Form = XmlSchemaForm.Unqualified, DataType = "IDREF")]
        public string EyepieceId { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "lens", Form = XmlSchemaForm.Unqualified, DataType = "IDREF")]
        public string LensId { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "filter", Form=XmlSchemaForm.Unqualified, DataType = "IDREF")]
        public string FilterId { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "magnification", Form = XmlSchemaForm.Unqualified)]
        public double Magnification { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool MagnificationSpecified { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "imager", Form = XmlSchemaForm.Unqualified, DataType = "IDREF")]
        public string CameraId { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "result", Form = XmlSchemaForm.Unqualified)]
        public OALFindings[] Result { get; set; }
        
        /// <remarks/>
        [XmlElement(ElementName = "image", Form = XmlSchemaForm.Unqualified)]
        public string[] Image { get; set; }

        /// <remarks/>
        [XmlAttribute(AttributeName = "id", DataType = "ID")]
        public string Id { get; set; }
    }
    
    /// <remarks/>
    [Serializable]
    [XmlType(TypeName = "surfaceBrightnessType", Namespace = OALData.OAL)]
    public partial class OALSurfaceBrightness 
    {        
        /// <remarks/>
        [XmlAttribute(AttributeName = "unit")]
        public OALSurfaceBrightnessUnit unit { get; set; }
        
        /// <remarks/>
        [XmlText]
        public double Value { get; set; }
    }
    
    /// <remarks/>
    [Serializable]
    [XmlType(TypeName = "surfaceBrightnessUnit", Namespace = OALData.OAL)]
    public enum OALSurfaceBrightnessUnit 
    {    
        /// <remarks/>
        [XmlEnum("mags-per-squarearcsec")]
        MagsPerSquareArcSec,
        
        /// <remarks/>
        [XmlEnum("mags-per-squarearcmin")]
        MagsPerSquareArcMin,
    }
    
    /// <remarks />
    [XmlInclude(typeof(OALCamera))]
    [Serializable]
    [XmlType(TypeName = "imagerType", Namespace = OALData.OAL)]
    public abstract partial class OALImager 
    {        
        /// <remarks/>
        [XmlElement(ElementName = "model", Form = XmlSchemaForm.Unqualified)]
        public string Model { get; set; }
        
        /// <remarks/>
        [XmlElement(ElementName = "vendor", Form = XmlSchemaForm.Unqualified)]
        public string Vendor { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "remarks", Form = XmlSchemaForm.Unqualified)]
        public string Remarks { get; set; }

        /// <remarks/>
        [XmlAttribute(AttributeName = "id", DataType="ID")]
        public string Id { get; set; }
    }
    
    /// <remarks/>
    [Serializable]
    [XmlType(TypeName = "ccdCameraType", Namespace = OALData.OAL)]
    public partial class OALCamera : OALImager 
    {        
        /// <remarks/>
        [XmlElement(ElementName = "pixelsX", Form = XmlSchemaForm.Unqualified, DataType = "positiveInteger")]
        public string PixelsX { get; set; }
        
        /// <remarks/>
        [XmlElement(ElementName = "pixelsY", Form = XmlSchemaForm.Unqualified, DataType="positiveInteger")]
        public string PixelsY { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "pixelXSize", Form = XmlSchemaForm.Unqualified)]
        public decimal PixelXSize { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool PixelXSizeSpecified { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "pixelYSize", Form = XmlSchemaForm.Unqualified)]
        public decimal PixelYSize { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool PixelYSizeSpecified { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "binning", Form = XmlSchemaForm.Unqualified, DataType = "integer")]
        public string Binning { get; set; } = "1";
    }
    
    /// <remarks/>
    [Serializable]
    [XmlType(TypeName = "filterType", Namespace = OALData.OAL)]
    public partial class OALFilter 
    {
        /// <remarks/>
        [XmlElement(ElementName = "model", Form = XmlSchemaForm.Unqualified)]
        public string Model { get; set; }
        
        /// <remarks/>
        [XmlElement(ElementName = "vendor", Form = XmlSchemaForm.Unqualified)]
        public string Vendor { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "type", Form = XmlSchemaForm.Unqualified)]
        public filterKind Type { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "color", Form = XmlSchemaForm.Unqualified)]
        public filterColorType Color { get; set; }
            
        /// <remarks/>
        [XmlIgnore]
        public bool ColorSpecified { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "wratten", Form =XmlSchemaForm.Unqualified)]
        public string Wratten { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "schott", Form =XmlSchemaForm.Unqualified)]
        public string Schott { get; set; }

        /// <remarks/>
        [XmlAttribute(AttributeName = "id", DataType = "ID")]
        public string Id { get; set; }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [XmlType(Namespace=OALData.OAL)]
    public enum filterKind {
        
        /// <remarks/>
        other,
        
        /// <remarks/>
        [XmlEnumAttribute("broad band")]
        broadband,
        
        /// <remarks/>
        [XmlEnumAttribute("narrow band")]
        narrowband,
        
        /// <remarks/>
        [XmlEnumAttribute("O-III")]
        OIII,
        
        /// <remarks/>
        [XmlEnumAttribute("H-beta")]
        Hbeta,
        
        /// <remarks/>
        [XmlEnumAttribute("H-alpha")]
        Halpha,
        
        /// <remarks/>
        color,
        
        /// <remarks/>
        neutral,
        
        /// <remarks/>
        corrective,
        
        /// <remarks/>
        solar,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [XmlType(Namespace=OALData.OAL)]
    public enum filterColorType {
        
        /// <remarks/>
        [XmlEnumAttribute("light red")]
        lightred,
        
        /// <remarks/>
        red,
        
        /// <remarks/>
        [XmlEnumAttribute("deep red")]
        deepred,
        
        /// <remarks/>
        orange,
        
        /// <remarks/>
        [XmlEnumAttribute("light yellow")]
        lightyellow,
        
        /// <remarks/>
        [XmlEnumAttribute("deep yellow")]
        deepyellow,
        
        /// <remarks/>
        yellow,
        
        /// <remarks/>
        [XmlEnumAttribute("yellow-green")]
        yellowgreen,
        
        /// <remarks/>
        [XmlEnumAttribute("light green")]
        lightgreen,
        
        /// <remarks/>
        green,
        
        /// <remarks/>
        [XmlEnumAttribute("medium blue")]
        mediumblue,
        
        /// <remarks/>
        [XmlEnumAttribute("pale blue")]
        paleblue,
        
        /// <remarks/>
        blue,
        
        /// <remarks/>
        [XmlEnumAttribute("deep blue")]
        deepblue,
        
        /// <remarks/>
        violet,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace=OALData.OAL)]
    public partial class OALLens {
        
        private string modelField;
        
        private string vendorField;
        
        private double factorField;
        
        private string idField;
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public string model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public string vendor {
            get {
                return this.vendorField;
            }
            set {
                this.vendorField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public double factor {
            get {
                return this.factorField;
            }
            set {
                this.factorField = value;
            }
        }
        
        /// <remarks/>
        [XmlAttribute(DataType="ID")]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(TypeName = "eyepiece", Namespace=OALData.OAL)]
    public partial class OALEyepiece {
        
        private string modelField;
        
        private string vendorField;
        
        private double focalLengthField;
        
        private double maxFocalLengthField;
        
        private bool maxFocalLengthFieldSpecified;
        
        private OALNonNegativeAngle apparentFOVField;
        
        private string idField;
        
        /// <remarks/>
        [XmlElement(ElementName = "model")]
        public string model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public string vendor {
            get {
                return this.vendorField;
            }
            set {
                this.vendorField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public double focalLength {
            get {
                return this.focalLengthField;
            }
            set {
                this.focalLengthField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public double maxFocalLength {
            get {
                return this.maxFocalLengthField;
            }
            set {
                this.maxFocalLengthField = value;
            }
        }
        
        /// <remarks/>
        [XmlIgnore]
        public bool maxFocalLengthSpecified {
            get {
                return this.maxFocalLengthFieldSpecified;
            }
            set {
                this.maxFocalLengthFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public OALNonNegativeAngle apparentFOV {
            get {
                return this.apparentFOVField;
            }
            set {
                this.apparentFOVField = value;
            }
        }
        
        /// <remarks/>
        [XmlAttribute(DataType="ID")]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [XmlInclude(typeof(fixedMagnificationOpticsType))]
    [XmlInclude(typeof(scopeType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace=OALData.OAL)]
    public abstract partial class OALOptics {
        
        private string modelField;
        
        private string typeField;
        
        private string vendorField;
        
        private double apertureField;
        
        private double lightGraspField;
        
        private bool lightGraspFieldSpecified;
        
        private opticsTypeOrientation orientationField;
        
        private string idField;
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public string model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public string type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public string vendor {
            get {
                return this.vendorField;
            }
            set {
                this.vendorField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public double aperture {
            get {
                return this.apertureField;
            }
            set {
                this.apertureField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public double lightGrasp {
            get {
                return this.lightGraspField;
            }
            set {
                this.lightGraspField = value;
            }
        }
        
        /// <remarks/>
        [XmlIgnore]
        public bool lightGraspSpecified {
            get {
                return this.lightGraspFieldSpecified;
            }
            set {
                this.lightGraspFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public opticsTypeOrientation orientation {
            get {
                return this.orientationField;
            }
            set {
                this.orientationField = value;
            }
        }
        
        /// <remarks/>
        [XmlAttribute(DataType="ID")]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(AnonymousType=true, Namespace=OALData.OAL)]
    public partial class opticsTypeOrientation {
        
        private bool erectField;
        
        private bool truesidedField;
        
        /// <remarks/>
        [XmlAttribute()]
        public bool erect {
            get {
                return this.erectField;
            }
            set {
                this.erectField = value;
            }
        }
        
        /// <remarks/>
        [XmlAttribute()]
        public bool truesided {
            get {
                return this.truesidedField;
            }
            set {
                this.truesidedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace=OALData.OAL)]
    public partial class fixedMagnificationOpticsType : OALOptics {
        
        private double magnificationField;
        
        private OALNonNegativeAngle trueFieldField;
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public double magnification {
            get {
                return this.magnificationField;
            }
            set {
                this.magnificationField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public OALNonNegativeAngle trueField {
            get {
                return this.trueFieldField;
            }
            set {
                this.trueFieldField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace=OALData.OAL)]
    public partial class scopeType : OALOptics {
        
        private double focalLengthField;
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public double focalLength {
            get {
                return this.focalLengthField;
            }
            set {
                this.focalLengthField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace=OALData.OAL)]
    public partial class referenceFrameType {
        
        private referenceFrameTypeOrigin originField;
        
        private referenceFrameTypeEquinox equinoxField;
        
        public referenceFrameType() {
            this.equinoxField = referenceFrameTypeEquinox.J2000;
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public referenceFrameTypeOrigin origin {
            get {
                return this.originField;
            }
            set {
                this.originField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public referenceFrameTypeEquinox equinox {
            get {
                return this.equinoxField;
            }
            set {
                this.equinoxField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [XmlType(AnonymousType=true, Namespace=OALData.OAL)]
    public enum referenceFrameTypeOrigin {
        
        /// <remarks/>
        geo,
        
        /// <remarks/>
        topo,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [XmlType(AnonymousType=true, Namespace=OALData.OAL)]
    public enum referenceFrameTypeEquinox {
        
        /// <remarks/>
        J2000,
        
        /// <remarks/>
        B1950,
        
        /// <remarks/>
        EqOfDate,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace=OALData.OAL)]
    public partial class equPosType {
        
        private OALNonNegativeAngle raField;
        
        private OALAngle decField;
        
        private referenceFrameType frameField;
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public OALNonNegativeAngle ra {
            get {
                return this.raField;
            }
            set {
                this.raField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public OALAngle dec {
            get {
                return this.decField;
            }
            set {
                this.decField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public referenceFrameType frame {
            get {
                return this.frameField;
            }
            set {
                this.frameField = value;
            }
        }
    }
    
    /// <remarks/>
    [XmlInclude(typeof(OALTargetSolarSystem))]
    [XmlInclude(typeof(OALTargetSun))]
    [XmlInclude(typeof(OALTargetPlanet))]
    [XmlInclude(typeof(OALTargetMoon))]
    [XmlInclude(typeof(OALTargetMinorPlanet))]
    [XmlInclude(typeof(OALTargetComet))]
    [XmlInclude(typeof(OALTargetDeepSky))]
    [XmlInclude(typeof(OALTargetDeepSkySC))]
    [XmlInclude(typeof(OALTargetDeepSkyQS))]
    [XmlInclude(typeof(OALTargetDeepSkyPN))]
    [XmlInclude(typeof(OALTargetDeepSkyOC))]
    [XmlInclude(typeof(deepSkyNA))]
    [XmlInclude(typeof(deepSkyGX))]
    [XmlInclude(typeof(deepSkyGN))]
    [XmlInclude(typeof(deepSkyGC))]
    [XmlInclude(typeof(deepSkyDS))]
    [XmlInclude(typeof(deepSkyDN))]
    [XmlInclude(typeof(deepSkyCG))]
    [XmlInclude(typeof(deepSkyAS))]
    [XmlInclude(typeof(deepSkyMS))]
    [XmlInclude(typeof(starTargetType))]
    [XmlInclude(typeof(variableStarTargetType))]
    [Serializable]
    [XmlType(Namespace=OALData.OAL)]
    public partial class OALTarget 
    {
        /// <remarks/>
        [XmlElement("datasource", typeof(string), Form = XmlSchemaForm.Unqualified)]
        [XmlElement("observer", typeof(string), Form = XmlSchemaForm.Unqualified, DataType = "IDREF")]
        [XmlChoiceIdentifier("ItemElementName")]
        public string Item { get; set; }
        
        /// <remarks/>
        [XmlIgnore]
        public ItemChoiceType ItemElementName { get; set; }
        
        /// <remarks/>
        [XmlElement(ElementName = "name", Form = XmlSchemaForm.Unqualified)]
        public string Name { get; set; }
        
        /// <remarks/>
        [XmlElement(ElementName = "alias", Form = XmlSchemaForm.Unqualified)]
        public string[] Alias { get; set; }
        
        /// <remarks/>
        [XmlElement(ElementName = "position", Form = XmlSchemaForm.Unqualified)]
        public equPosType Position { get; set; }
        
        /// <remarks/>
        [XmlElement(ElementName = "constellation", Form = XmlSchemaForm.Unqualified)]
        public string Constellation { get; set; }
        
        /// <remarks/>
        [XmlElement(ElementName = "notes", Form = XmlSchemaForm.Unqualified)]
        public string Notes { get; set; }
        
        /// <remarks/>
        [XmlAttribute(AttributeName = "id", DataType = "ID")]
        public string Id { get; set; }
    }
    
    [Serializable]
    [XmlType(Namespace=OALData.OAL, IncludeInSchema = false)]
    public enum ItemChoiceType {
        
        /// <remarks/>
        [XmlEnumAttribute(":datasource")]
        datasource,
        
        /// <remarks/>
        [XmlEnumAttribute(":observer")]
        observer,
    }

    /// <summary>
    /// OAL abstract target type for solar system objects
    /// </summary>
    [XmlInclude(typeof(OALTargetSun))]
    [XmlInclude(typeof(OALTargetPlanet))]
    [XmlInclude(typeof(OALTargetMoon))]
    [XmlInclude(typeof(OALTargetMinorPlanet))]
    [XmlInclude(typeof(OALTargetComet))]
    [Serializable]
    [XmlType(TypeName = "SolarSystemTargetType", Namespace = OALData.OAL)]
    public abstract partial class OALTargetSolarSystem : OALTarget { }
    
    /// <summary>
    /// OAL target type for Sun
    /// </summary>
    [Serializable]
    [XmlType(TypeName = "SunTargetType", Namespace = OALData.OAL)]
    public partial class OALTargetSun : OALTargetSolarSystem { }

    /// <summary>
    /// OAL target type for planets
    /// </summary>
    [Serializable]
    [XmlType(TypeName = "PlanetTargetType", Namespace = OALData.OAL)]
    public partial class OALTargetPlanet : OALTargetSolarSystem { }

    /// <summary>
    /// OAL target type for Moon
    /// </summary>
    [Serializable]
    [XmlType(TypeName = "MoonTargetType", Namespace = OALData.OAL)]
    public partial class OALTargetMoon : OALTargetSolarSystem { }

    /// <summary>
    /// OAL target type for minor planets
    /// </summary>
    [Serializable]
    [XmlType(TypeName = "MinorPlanetTargetType", Namespace = OALData.OAL)]
    public partial class OALTargetMinorPlanet : OALTargetSolarSystem { }

    /// <summary>
    /// OAL target type for comets
    /// </summary>
    [Serializable]
    [XmlType(TypeName = "CometTargetType", Namespace = OALData.OAL)]
    public partial class OALTargetComet : OALTargetSolarSystem { }

    /// <summary>
    /// OAL abstract target type for deep sky objects
    /// </summary>
    [XmlInclude(typeof(OALTargetDeepSkySC))]
    [XmlInclude(typeof(OALTargetDeepSkyQS))]
    [XmlInclude(typeof(OALTargetDeepSkyPN))]
    [XmlInclude(typeof(OALTargetDeepSkyOC))]
    [XmlInclude(typeof(deepSkyNA))]
    [XmlInclude(typeof(deepSkyGX))]
    [XmlInclude(typeof(deepSkyGN))]
    [XmlInclude(typeof(deepSkyGC))]
    [XmlInclude(typeof(deepSkyDS))]
    [XmlInclude(typeof(deepSkyDN))]
    [XmlInclude(typeof(deepSkyCG))]
    [XmlInclude(typeof(deepSkyAS))]   
    [Serializable]
    [XmlType(TypeName = "deepSkyTargetType", Namespace = OALData.OAL)]
    public abstract partial class OALTargetDeepSky : OALTarget 
    {  
        /// <remarks/>
        [XmlElement(ElementName = "smallDiameter", Form = XmlSchemaForm.Unqualified)]
        public OALNonNegativeAngle SmallDiameter { get; set; }
        
        /// <remarks/>
        [XmlElement(ElementName = "largeDiameter", Form = XmlSchemaForm.Unqualified)]
        public OALNonNegativeAngle LargeDiameter { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "visMag", Form = XmlSchemaForm.Unqualified)]
        public double VisMag { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool VisMagSpecified { get; set; }

        /// <remarks/>
        [XmlElement(ElementName = "surfBr", Form = XmlSchemaForm.Unqualified)]
        public OALSurfaceBrightness SurfBr { get; set; }
    }

    /// <summary>
    /// OAL target type for star clouds (deep sky)
    /// </summary>
    [Serializable]
    [XmlType(TypeName = "deepSkySC", Namespace = OALData.OAL)]
    public partial class OALTargetDeepSkySC : OALTargetDeepSky 
    {
        /// <summary>
        /// Position angle of large axis in degrees
        /// </summary>
        [XmlElement(ElementName = "pa", Form = XmlSchemaForm.Unqualified, DataType = "integer")]
        public string PositionAngle { get; set; }
    }

    /// <summary>
    ///  OAL target type for quasars (deep sky)
    /// </summary>
    [Serializable]
    [XmlType(TypeName = "deepSkyQS", Namespace = OALData.OAL)]
    public partial class OALTargetDeepSkyQS : OALTargetDeepSky { }


    /// <summary>
    /// OAL target type for planetary nebulae (deep sky)
    /// </summary>
    [Serializable]
    [XmlType(TypeName = "deepSkyPN", Namespace = OALData.OAL)]
    public partial class OALTargetDeepSkyPN : OALTargetDeepSky
    {
        /// <remarks/>
        [XmlElement(ElementName = "magStar", Form = XmlSchemaForm.Unqualified)]
        public double MagStar { get; set; }

        /// <remarks/>
        [XmlIgnore]
        public bool MagStarSpecified { get; set; }
    }
       
    /// <remarks/>
    
    [Serializable]
    [XmlType(TypeName = "deepSkyOC", Namespace = OALData.OAL)]
    public partial class OALTargetDeepSkyOC : OALTargetDeepSky 
    {   
        private string starsField;
        
        private double brightestStarField;
        
        private bool brightestStarFieldSpecified;
        
        private string classField;
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified, DataType="positiveInteger")]
        public string stars {
            get {
                return this.starsField;
            }
            set {
                this.starsField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public double brightestStar {
            get {
                return this.brightestStarField;
            }
            set {
                this.brightestStarField = value;
            }
        }
        
        /// <remarks/>
        [XmlIgnore]
        public bool brightestStarSpecified {
            get {
                return this.brightestStarFieldSpecified;
            }
            set {
                this.brightestStarFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public string @class {
            get {
                return this.classField;
            }
            set {
                this.classField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace=OALData.OAL)]
    public partial class deepSkyNA : OALTargetDeepSky {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace=OALData.OAL)]
    public partial class deepSkyGX : OALTargetDeepSky {
        
        private string hubbleTypeField;
        
        private string paField;
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public string hubbleType {
            get {
                return this.hubbleTypeField;
            }
            set {
                this.hubbleTypeField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified, DataType="integer")]
        public string pa {
            get {
                return this.paField;
            }
            set {
                this.paField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace=OALData.OAL)]
    public partial class deepSkyGN : OALTargetDeepSky {
        
        private string nebulaTypeField;
        
        private string paField;
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public string nebulaType {
            get {
                return this.nebulaTypeField;
            }
            set {
                this.nebulaTypeField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified, DataType="integer")]
        public string pa {
            get {
                return this.paField;
            }
            set {
                this.paField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace=OALData.OAL)]
    public partial class deepSkyGC : OALTargetDeepSky {
        
        private double magStarsField;
        
        private bool magStarsFieldSpecified;
        
        private string concField;
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public double magStars {
            get {
                return this.magStarsField;
            }
            set {
                this.magStarsField = value;
            }
        }
        
        /// <remarks/>
        [XmlIgnore]
        public bool magStarsSpecified {
            get {
                return this.magStarsFieldSpecified;
            }
            set {
                this.magStarsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public string conc {
            get {
                return this.concField;
            }
            set {
                this.concField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace=OALData.OAL)]
    public partial class deepSkyDS : OALTargetDeepSky {
        
        private OALNonNegativeAngle separationField;
        
        private string paField;
        
        private double magCompField;
        
        private bool magCompFieldSpecified;
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public OALNonNegativeAngle separation {
            get {
                return this.separationField;
            }
            set {
                this.separationField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified, DataType="integer")]
        public string pa {
            get {
                return this.paField;
            }
            set {
                this.paField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public double magComp {
            get {
                return this.magCompField;
            }
            set {
                this.magCompField = value;
            }
        }
        
        /// <remarks/>
        [XmlIgnore]
        public bool magCompSpecified {
            get {
                return this.magCompFieldSpecified;
            }
            set {
                this.magCompFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace=OALData.OAL)]
    public partial class deepSkyDN : OALTargetDeepSky {
        
        private string paField;
        
        private string opacityField;
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified, DataType="integer")]
        public string pa {
            get {
                return this.paField;
            }
            set {
                this.paField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified, DataType="integer")]
        public string opacity {
            get {
                return this.opacityField;
            }
            set {
                this.opacityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace=OALData.OAL)]
    public partial class deepSkyCG : OALTargetDeepSky {
        
        private double mag10Field;
        
        private bool mag10FieldSpecified;
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public double mag10 {
            get {
                return this.mag10Field;
            }
            set {
                this.mag10Field = value;
            }
        }
        
        /// <remarks/>
        [XmlIgnore]
        public bool mag10Specified {
            get {
                return this.mag10FieldSpecified;
            }
            set {
                this.mag10FieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace=OALData.OAL)]
    public partial class deepSkyAS : OALTargetDeepSky {
        
        private string paField;
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified, DataType="integer")]
        public string pa {
            get {
                return this.paField;
            }
            set {
                this.paField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace=OALData.OAL)]
    public partial class deepSkyMS : OALTarget {
        
        private string[] componentField;
        
        /// <remarks/>
        [XmlElement("component", Form=XmlSchemaForm.Unqualified, DataType="IDREF")]
        public string[] component {
            get {
                return this.componentField;
            }
            set {
                this.componentField = value;
            }
        }
    }
    
    /// <remarks/>
    [XmlInclude(typeof(variableStarTargetType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace=OALData.OAL)]
    public partial class starTargetType : OALTarget {
        
        private double apparentMagField;
        
        private bool apparentMagFieldSpecified;
        
        private string classificationField;
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public double apparentMag {
            get {
                return this.apparentMagField;
            }
            set {
                this.apparentMagField = value;
            }
        }
        
        /// <remarks/>
        [XmlIgnore]
        public bool apparentMagSpecified {
            get {
                return this.apparentMagFieldSpecified;
            }
            set {
                this.apparentMagFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public string classification {
            get {
                return this.classificationField;
            }
            set {
                this.classificationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace=OALData.OAL)]
    public partial class variableStarTargetType : starTargetType {
        
        private string typeField;
        
        private double maxApparentMagField;
        
        private bool maxApparentMagFieldSpecified;
        
        private double periodField;
        
        private bool periodFieldSpecified;
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public string type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public double maxApparentMag {
            get {
                return this.maxApparentMagField;
            }
            set {
                this.maxApparentMagField = value;
            }
        }
        
        /// <remarks/>
        [XmlIgnore]
        public bool maxApparentMagSpecified {
            get {
                return this.maxApparentMagFieldSpecified;
            }
            set {
                this.maxApparentMagFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public double period {
            get {
                return this.periodField;
            }
            set {
                this.periodField = value;
            }
        }
        
        /// <remarks/>
        [XmlIgnore]
        public bool periodSpecified {
            get {
                return this.periodFieldSpecified;
            }
            set {
                this.periodFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace=OALData.OAL)]
    public partial class OALSession {
        
        private System.DateTime beginField;
        
        private System.DateTime endField;
        
        private string siteField;
        
        private string[] coObserverField;
        
        private string weatherField;
        
        private string equipmentField;
        
        private string commentsField;
        
        private string[] imageField;
        
        private string idField;
        
        private string langField;
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public System.DateTime begin {
            get {
                return this.beginField;
            }
            set {
                this.beginField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public System.DateTime end {
            get {
                return this.endField;
            }
            set {
                this.endField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified, DataType="IDREF")]
        public string site {
            get {
                return this.siteField;
            }
            set {
                this.siteField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement("coObserver", Form=XmlSchemaForm.Unqualified, DataType="IDREF")]
        public string[] coObserver {
            get {
                return this.coObserverField;
            }
            set {
                this.coObserverField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public string weather {
            get {
                return this.weatherField;
            }
            set {
                this.weatherField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public string equipment {
            get {
                return this.equipmentField;
            }
            set {
                this.equipmentField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public string comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement("image", Form=XmlSchemaForm.Unqualified)]
        public string[] image {
            get {
                return this.imageField;
            }
            set {
                this.imageField = value;
            }
        }
        
        /// <remarks/>
        [XmlAttribute(DataType="ID")]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [XmlAttribute()]
        public string lang {
            get {
                return this.langField;
            }
            set {
                this.langField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace=OALData.OAL)]
    public partial class OALSite {
        
        private string nameField;
        
        private OALAngle longitudeField;
        
        private OALAngle latitudeField;
        
        private double elevationField;
        
        private bool elevationFieldSpecified;
        
        private string timezoneField;
        
        private string codeField;
        
        private string idField;
        
        public OALSite() {
            this.timezoneField = "0";
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public OALAngle longitude {
            get {
                return this.longitudeField;
            }
            set {
                this.longitudeField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public OALAngle latitude {
            get {
                return this.latitudeField;
            }
            set {
                this.latitudeField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified)]
        public double elevation {
            get {
                return this.elevationField;
            }
            set {
                this.elevationField = value;
            }
        }
        
        /// <remarks/>
        [XmlIgnore]
        public bool elevationSpecified {
            get {
                return this.elevationFieldSpecified;
            }
            set {
                this.elevationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified, DataType="integer")]
        public string timezone {
            get {
                return this.timezoneField;
            }
            set {
                this.timezoneField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(Form=XmlSchemaForm.Unqualified, DataType="integer")]
        public string code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        [XmlAttribute(DataType="ID")]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
}
