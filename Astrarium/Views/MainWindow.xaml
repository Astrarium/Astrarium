<Window x:Class="Astrarium.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:a="clr-namespace:Astrarium"
        xmlns:c="clr-namespace:Astrarium.Controls"
        xmlns:t="clr-namespace:Astrarium.Types;assembly=Astrarium.Types"
        xmlns:cc="clr-namespace:Astrarium.Types.Controls;assembly=Astrarium.Types"
        xmlns:s="clr-namespace:Astrarium.Types.Themes;assembly=Astrarium.Types"
        mc:Ignorable="d"
        Style="{StaticResource {x:Type Window}}"
        MinHeight="300" MinWidth="300"
        WindowState="{Binding WindowState, Mode=OneTime}"
        ResizeMode="CanResize"
        WindowStartupLocation="CenterScreen"
        a:MainWindow.FullScreen="{Binding FullScreen, Mode=OneWay}"
        a:MainWindow.MousePositionConstellation="{Binding MouseConstellation, Mode=OneWayToSource}"
        a:MainWindow.MouseEquatorialPosition="{Binding MouseEquatorialCoordinates, Mode=OneWayToSource}"
        a:MainWindow.MouseHorizontalPosition="{Binding MouseHorizontalCoordinates, Mode=OneWayToSource}"
        a:MainWindow.FPS="{Binding FPS, Mode=OneWayToSource}"        
        a:MainWindow.MapKeyDown="{Binding MapKeyDownCommand}"
        a:MainWindow.MapDoubleClick="{Binding MapDoubleClickCommand}"
        a:MainWindow.MapRightClick="{Binding MapRightClickCommand}"
        a:MainWindow.MapZoom="{Binding ZoomCommand}"
        a:MainWindow.WindowSize="{Binding WindowSize, Mode=TwoWay}"
        s:WindowProperties.CompactMenu="{Binding MainMenuItems}"        
        s:WindowProperties.CompactMenuVisible="{Binding IsCompactMenu, Converter={s:BoolToVisibilityConverter}}"
        Title="Astrarium" Height="768" Width="1024">

    <Window.Resources>
        <ResourceDictionary>
            <DrawingImage x:Key="ImageLock">
                <DrawingImage.Drawing>
                    <DrawingGroup ClipGeometry="M0,0 V125 H100 V0 H0 Z">
                        <GeometryDrawing Brush="{StaticResource BrushForeground}" Geometry="F1 M100,125z M0,0z M50.00049,14.06006C38.51611,14.06006,29.17237,23.40283,29.17237,34.88721L29.17237,41.73682 24.41163,41.73682C22.20265,41.73682,20.41163,43.52784,20.41163,45.73682L20.41163,81.93994C20.41163,84.14892,22.20265,85.93994,24.41163,85.93994L75.58839,85.93994C77.79737,85.93994,79.58839,84.14892,79.58839,81.93994L79.58839,45.73682C79.58839,43.52784,77.79737,41.73682,75.58839,41.73682L70.82765,41.73682 70.82765,34.88721C70.82764,23.40283,61.48486,14.06006,50.00049,14.06006z M37.17236,34.88721C37.17236,27.81397 42.92724,22.06006 50.00048,22.06006 57.07372,22.06006 62.82763,27.81397 62.82763,34.88721L62.82763,41.73682 37.17236,41.73682 37.17236,34.88721z M71.58838,49.73682L71.58838,77.93994 28.41162,77.93994 28.41162,49.73682 71.58838,49.73682z" />
                    </DrawingGroup>
                </DrawingImage.Drawing>
            </DrawingImage>
            <DrawingImage x:Key="ImageUnlock">
                <DrawingImage.Drawing>
                    <DrawingGroup ClipGeometry="M0,0 V125 H100 V0 H0 Z">
                        <GeometryDrawing Brush="{StaticResource BrushForeground}" Geometry="F1 M100,125z M0,0z M66.82764,40.61035C69.03662,40.61035,70.82764,38.81933,70.82764,36.61035L70.82764,25.76172C70.82764,14.27734 61.48487,4.9336 50.00049,4.9336 38.51611,4.9336 29.17237,14.27735 29.17237,25.76172L29.17237,50.8623 24.41163,50.8623C22.20265,50.8623,20.41163,52.65332,20.41163,54.8623L20.41163,91.0664C20.41163,93.27538,22.20265,95.0664,24.41163,95.0664L75.58839,95.0664C77.79737,95.0664,79.58839,93.27538,79.58839,91.0664L79.58839,54.8623C79.58839,52.65332,77.79737,50.8623,75.58839,50.8623L37.17236,50.8623 37.17236,25.76172C37.17236,18.68848 42.92724,12.9336 50.00048,12.9336 57.07372,12.9336 62.82763,18.68848 62.82763,25.76172L62.82763,36.61035C62.82764,38.81934,64.61865,40.61035,66.82764,40.61035z M71.58838,58.8623L71.58838,87.0664 28.41162,87.0664 28.41162,58.8623 71.58838,58.8623z" />
                    </DrawingGroup>
                </DrawingImage.Drawing>
            </DrawingImage>
        </ResourceDictionary>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!-- MAIN MENU -->
        <DockPanel Grid.Row="0">
            <Menu x:Name="Menu" VerticalAlignment="Center" ItemsSource="{Binding MainMenuItems}" Visibility="{Binding IsCompactMenu, Converter={s:InverseBoolToVisibilityConverter}}">
                <Menu.ItemContainerStyle>
                    <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                        <Setter Property="IsChecked" Value="{Binding IsChecked}" />
                        <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
                        <Setter Property="Visibility" Value="{Binding IsVisible, Converter={s:BoolToVisibilityConverter}}" />
                        <Setter Property="Header" Value="{Binding Header, Converter={s:LocalizedTextConverter}}" />
                        <Setter Property="ToolTip" Value="{Binding Tooltip, Converter={s:LocalizedTextConverter}}" />
                        <Setter Property="InputGestureText" Value="{Binding InputGestureText}" />
                        <Setter Property="Command" Value="{Binding Command}" />
                        <Setter Property="CommandParameter" Value="{Binding CommandParameter}" />
                        <Setter Property="ItemsSource" Value="{Binding SubItems}" />
                    </Style>
                </Menu.ItemContainerStyle>
            </Menu>
        </DockPanel>

        <!-- TOOLBAR -->
        <DockPanel Grid.Row="1" Visibility="{Binding IsToolbarVisible, Converter={s:BoolToVisibilityConverter}}">
            <ToolBar ToolBarTray.IsLocked="True" ItemsSource="{Binding ToolbarItems}" SnapsToDevicePixels="True">
                <ToolBar.Resources>

                    <DataTemplate x:Key="ToolbarSeparatorTemplate">
                        <Grid Width="6" Height="18" />
                    </DataTemplate>

                    <DataTemplate x:Key="ToolbarButtonTemplate">
                        <Button Padding="0" Margin="0" Width="24" Height="24" ToolTip="{Binding Tooltip, Converter={s:LocalizedTextConverter}}" Command="{Binding Command}" CommandParameter="{Binding CommandParameter}" SnapsToDevicePixels="True">
                            <Button.Content>
                                <Rectangle Margin="2" Width="18" Height="18">
                                    <Rectangle.Fill>
                                        <SolidColorBrush Color="{DynamicResource ColorForeground}" />
                                    </Rectangle.Fill>
                                    <Rectangle.OpacityMask>
                                        <ImageBrush AlignmentX="Left" AlignmentY="Top" ImageSource="{Binding ImageKey, Converter={s:ImageKeyToImageConverter}}"  Stretch="UniformToFill" />
                                    </Rectangle.OpacityMask>
                                </Rectangle>
                            </Button.Content>
                        </Button>
                    </DataTemplate>

                    <DataTemplate x:Key="ToolbarToggleButtonTemplate">
                        <ToggleButton Padding="0" Margin="0" Width="26" Height="26" ToolTip="{Binding Tooltip, Converter={s:LocalizedTextConverter}}" Command="{Binding Command}" IsChecked="{Binding IsChecked}" SnapsToDevicePixels="True">
                            <ToggleButton.Content>
                                <Rectangle Margin="2" Width="18" Height="18">
                                    <Rectangle.Fill>
                                        <SolidColorBrush Color="{DynamicResource ColorForeground}" />
                                    </Rectangle.Fill>
                                    <Rectangle.OpacityMask>
                                        <ImageBrush AlignmentX="Left" AlignmentY="Top" ImageSource="{Binding ImageKey, Converter={s:ImageKeyToImageConverter}}"  Stretch="UniformToFill" />
                                    </Rectangle.OpacityMask>
                                </Rectangle>
                            </ToggleButton.Content>
                        </ToggleButton>
                    </DataTemplate>
                </ToolBar.Resources>

                <ToolBar.ItemTemplate>
                    <DataTemplate>
                        <ContentControl Content="{Binding}">
                            <ContentControl.Style>
                                <Style TargetType="ContentControl">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                            <Setter Property="ContentTemplate" Value="{StaticResource ToolbarSeparatorTemplate}" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Type}" Value="{x:Type t:ToolbarButton}">
                                            <Setter Property="ContentTemplate" Value="{StaticResource ToolbarButtonTemplate}" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Type}" Value="{x:Type t:ToolbarToggleButton}">
                                            <Setter Property="ContentTemplate" Value="{StaticResource ToolbarToggleButtonTemplate}" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ContentControl.Style>
                        </ContentControl>
                    </DataTemplate>
                </ToolBar.ItemTemplate>
            </ToolBar>

            <c:AutoCompleteTextBox 
                Watermark="{t:Text Toolbar.SearchHint}"
                EmptyText="{t:Text Toolbar.SearchEmpty}"
                DisplayMember="Names[0]"
                BorderThickness="0"
                HorizontalAlignment="Right" 
                IconPlacement="Right"                
                Height="22"
                Margin="4"
                Width="150"                                
                SelectionCommit="{Binding QuickSearchCommand}"
                Provider="{Binding SearchProvider}">
                <c:AutoCompleteTextBox.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <Rectangle Margin="2" Width="16" Height="16" ToolTip="{Binding Converter={s:CelestialObjectTypeDescriptionConverter}}">
                                <Rectangle.Fill>
                                    <SolidColorBrush Color="{DynamicResource ColorControlLightBackground}" />
                                </Rectangle.Fill>
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="{Binding Converter={s:CelestialObjectToIconConverter}}" Stretch="Uniform" />
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <TextBlock Padding="4 0 0 0" Text="{Binding Converter={s:CelestialObjectFullNameConverter}}" VerticalAlignment="Center"/>
                        </StackPanel>
                    </DataTemplate>
                </c:AutoCompleteTextBox.ItemTemplate>
            </c:AutoCompleteTextBox>
        </DockPanel>

        <!-- POPUP -->
        <c:AutoClosePopup
            PlacementTarget="{Binding ElementName=Host}"
            PopupAnimation="Fade"
            StaysOpen="True"
            AllowsTransparency="True"
            Placement="Center"
            x:Name="popup">
            <cc:BorderFix Width="Auto" Height="Auto" Style="{StaticResource PopupContentStyle}" BorderThickness="1">
                <TextBlock Padding="6" Name="popupText"></TextBlock>
            </cc:BorderFix>
        </c:AutoClosePopup>

        <!-- MAP -->
        <DockPanel Grid.Row="2" LastChildFill="true" Grid.ColumnSpan="2" Background="Transparent">
            <WindowsFormsHost x:Name="Host" Background="Black" Margin="5 0">
                <WindowsFormsHost.ContextMenu>
                    <ContextMenu ItemsSource="{Binding ContextMenuItems}" Opened="ContextMenu_Opened" StaysOpen="True">
                        <ContextMenu.ItemContainerStyle>
                            <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                <Setter Property="IsChecked" Value="{Binding IsChecked}" />
                                <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
                                <Setter Property="Visibility" Value="{Binding IsVisible, Converter={s:BoolToVisibilityConverter}}" />
                                <Setter Property="Header" Value="{Binding Header, Converter={s:LocalizedTextConverter}}" />
                                <Setter Property="Command" Value="{Binding Command}" />
                                <Setter Property="InputGestureText" Value="{Binding InputGestureText}" />
                                <Setter Property="CommandParameter" Value="{Binding CommandParameter}" />
                                <Setter Property="ItemsSource" Value="{Binding SubItems}" />
                                <Setter Property="ToolTip" Value="{Binding Tooltip}" />
                            </Style>
                        </ContextMenu.ItemContainerStyle>
                    </ContextMenu>
                </WindowsFormsHost.ContextMenu>
                <WindowsFormsHost.ToolTip>
                    <ToolTip x:Name="skyToolTip" />
                </WindowsFormsHost.ToolTip>
            </WindowsFormsHost>
        </DockPanel>


        <!-- STATUS BAR -->
        <StatusBar Grid.Row="3" Visibility="{Binding IsStatusBarVisible, Converter={s:BoolToVisibilityConverter}}" Grid.ColumnSpan="2">
            <TextBlock Width="30" TextAlignment="Center" Text="{Binding MouseConstellation, FallbackValue='Con'}" ToolTip="{t:Text StatusBar.Constellation}" />
            <Separator />
            <TextBlock Width="240" Text="{Binding MouseEquatorialCoordinates, FallbackValue='Equatorial coordinates'}" ToolTip="{t:Text StatusBar.EquatorialCoordinates}" />
            <Separator />
            <TextBlock Width="240" Text="{Binding MouseHorizontalCoordinates, FallbackValue='Horizontal coordinates'}" ToolTip="{t:Text StatusBar.HorizontalCoordinates}" />
            <Separator />
            <TextBlock Width="100" Text="{Binding MapViewAngleString, FallbackValue='Field of view'}" ToolTip="{t:Text StatusBar.ViewAngle}" />
            <Separator />
            <TextBlock Width="80" Text="{Binding FPS, FallbackValue='FPS'}" />
            <Separator />

            <StatusBarItem>
                <Menu Background="Transparent">
                    <MenuItem 
                        ItemsSource="{Binding SelectedObjectsMenuItems}" 
                        Header="{Binding SelectedObject, Converter={s:CelestialObjectNameConverter}, FallbackValue='Selected Object'}" 
                        ToolTip="{t:Text StatusBar.SelectedObject}">
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                <Setter Property="IsChecked" Value="{Binding IsChecked}" />
                                <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
                                <Setter Property="Visibility" Value="{Binding IsVisible, Converter={s:BoolToVisibilityConverter}}" />
                                <Setter Property="Header" Value="{Binding Header, Converter={s:LocalizedTextConverter}}" />
                                <Setter Property="Command" Value="{Binding Command}" />
                                <Setter Property="CommandParameter" Value="{Binding CommandParameter}" />
                                <Setter Property="ItemsSource" Value="{Binding SubItems}" />
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                </Menu>
            </StatusBarItem>

            <Separator />

            <!-- Date and Time controls -->
            <StatusBarItem HorizontalAlignment="Right" HorizontalContentAlignment="Right">
                <StackPanel Orientation="Horizontal">

                    <!-- Sync Date and Time toggler -->
                    <ToggleButton Width="17" Height="17" VerticalContentAlignment="Center" IsChecked="{Binding TimeSync}" Margin="0 0 4 0">
                        <ToggleButton.Style>
                            <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                            <Border x:Name="Border">
                                                <Image x:Name="LockedIcon" Stretch="UniformToFill" Height="13" Width="13" Margin="0 1 0 0" VerticalAlignment="Center" Source="{StaticResource ResourceKey=ImageUnlock}" />
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsChecked" Value="True">
                                                    <Setter TargetName="LockedIcon" Property="Source" Value="{StaticResource ResourceKey=ImageLock}" />
                                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource BrushControlBackground}"/>
                                                </Trigger>
                                                <Trigger Property="IsChecked" Value="False">
                                                    <Setter TargetName="LockedIcon" Property="Source" Value="{StaticResource ResourceKey=ImageUnlock}" />
                                                    <Setter TargetName="Border" Property="Background" Value="Transparent"/>
                                                </Trigger>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource BrushSelection}"/>
                                                    <Setter Property="Foreground" Value="{StaticResource BrushSelectionForeground}" />
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <Trigger Property="IsChecked" Value="True">
                                        <Setter Property="ToolTip" Value="{t:Text StatusBar.TimeSyncOn}" />
                                    </Trigger>
                                    <Trigger Property="IsChecked" Value="False">
                                        <Setter Property="ToolTip" Value="{t:Text StatusBar.TimeSyncOff}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </ToggleButton.Style>
                    </ToggleButton>

                    <!-- Date and Time picker button -->
                    <Button Width="Auto" Command="{Binding SetDateCommand}" IsEnabled="{Binding TimeSync, Converter={s:InverseBoolConverter}}" ToolTip="{t:Text StatusBar.DatePicker}">
                        <Button.Style>
                            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <Border x:Name="Border" Padding="4 0 4 0">
                                                <TextBlock Text="{Binding DateString, FallbackValue='01 Jan 2000 00:00:00'}" />
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource BrushSelection}"/>
                                                    <Setter Property="Foreground" Value="{StaticResource BrushSelectionForeground}" />
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Button.Style>
                    </Button>
                </StackPanel>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>
